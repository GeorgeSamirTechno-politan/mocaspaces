// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.content.Context;
import com.technopolitan.mocaspaces.modules.DialogModule;
import com.technopolitan.mocaspaces.modules.FaceDetectionModule;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.PixModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PersonalInfoFragmentModule_ProvideFaceDetectionModuleFactory implements Factory<FaceDetectionModule> {
  private final PersonalInfoFragmentModule module;

  private final Provider<DialogModule> dialogModuleProvider;

  private final Provider<Context> contextProvider;

  private final Provider<PixModule> pixModuleProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  public PersonalInfoFragmentModule_ProvideFaceDetectionModuleFactory(
      PersonalInfoFragmentModule module, Provider<DialogModule> dialogModuleProvider,
      Provider<Context> contextProvider, Provider<PixModule> pixModuleProvider,
      Provider<NavigationModule> navigationModuleProvider) {
    this.module = module;
    this.dialogModuleProvider = dialogModuleProvider;
    this.contextProvider = contextProvider;
    this.pixModuleProvider = pixModuleProvider;
    this.navigationModuleProvider = navigationModuleProvider;
  }

  @Override
  public FaceDetectionModule get() {
    return provideFaceDetectionModule(module, dialogModuleProvider.get(), contextProvider.get(), pixModuleProvider.get(), navigationModuleProvider.get());
  }

  public static PersonalInfoFragmentModule_ProvideFaceDetectionModuleFactory create(
      PersonalInfoFragmentModule module, Provider<DialogModule> dialogModuleProvider,
      Provider<Context> contextProvider, Provider<PixModule> pixModuleProvider,
      Provider<NavigationModule> navigationModuleProvider) {
    return new PersonalInfoFragmentModule_ProvideFaceDetectionModuleFactory(module, dialogModuleProvider, contextProvider, pixModuleProvider, navigationModuleProvider);
  }

  public static FaceDetectionModule provideFaceDetectionModule(PersonalInfoFragmentModule instance,
      DialogModule dialogModule, Context context, PixModule pixModule,
      NavigationModule navigationModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideFaceDetectionModule(dialogModule, context, pixModule, navigationModule));
  }
}
