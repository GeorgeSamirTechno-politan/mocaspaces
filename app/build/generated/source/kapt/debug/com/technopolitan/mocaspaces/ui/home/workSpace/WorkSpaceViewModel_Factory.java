// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.ui.home.workSpace;

import com.technopolitan.mocaspaces.data.remote.AddFavouriteWorkSpaceRemote;
import com.technopolitan.mocaspaces.data.remote.DeleteWorkSpaceFavouriteRemote;
import com.technopolitan.mocaspaces.data.remote.WorkSpaceRemote;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WorkSpaceViewModel_Factory implements Factory<WorkSpaceViewModel> {
  private final Provider<WorkSpaceRemote> workSpaceRemoteProvider;

  private final Provider<AddFavouriteWorkSpaceRemote> addFavouriteWorkSpaceRemoteProvider;

  private final Provider<DeleteWorkSpaceFavouriteRemote> deleteWorkSpaceFavouriteRemoteProvider;

  public WorkSpaceViewModel_Factory(Provider<WorkSpaceRemote> workSpaceRemoteProvider,
      Provider<AddFavouriteWorkSpaceRemote> addFavouriteWorkSpaceRemoteProvider,
      Provider<DeleteWorkSpaceFavouriteRemote> deleteWorkSpaceFavouriteRemoteProvider) {
    this.workSpaceRemoteProvider = workSpaceRemoteProvider;
    this.addFavouriteWorkSpaceRemoteProvider = addFavouriteWorkSpaceRemoteProvider;
    this.deleteWorkSpaceFavouriteRemoteProvider = deleteWorkSpaceFavouriteRemoteProvider;
  }

  @Override
  public WorkSpaceViewModel get() {
    return newInstance(workSpaceRemoteProvider.get(), addFavouriteWorkSpaceRemoteProvider.get(), deleteWorkSpaceFavouriteRemoteProvider.get());
  }

  public static WorkSpaceViewModel_Factory create(Provider<WorkSpaceRemote> workSpaceRemoteProvider,
      Provider<AddFavouriteWorkSpaceRemote> addFavouriteWorkSpaceRemoteProvider,
      Provider<DeleteWorkSpaceFavouriteRemote> deleteWorkSpaceFavouriteRemoteProvider) {
    return new WorkSpaceViewModel_Factory(workSpaceRemoteProvider, addFavouriteWorkSpaceRemoteProvider, deleteWorkSpaceFavouriteRemoteProvider);
  }

  public static WorkSpaceViewModel newInstance(WorkSpaceRemote workSpaceRemote,
      AddFavouriteWorkSpaceRemote addFavouriteWorkSpaceRemote,
      DeleteWorkSpaceFavouriteRemote deleteWorkSpaceFavouriteRemote) {
    return new WorkSpaceViewModel(workSpaceRemote, addFavouriteWorkSpaceRemote, deleteWorkSpaceFavouriteRemote);
  }
}
