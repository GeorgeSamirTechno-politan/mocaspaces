// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import android.content.Context;
import androidx.fragment.app.Fragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GoogleMapModule_Factory implements Factory<GoogleMapModule> {
  private final Provider<Context> contextProvider;

  private final Provider<UtilityModule> utilityModuleProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<PermissionModule> permissionModelProvider;

  public GoogleMapModule_Factory(Provider<Context> contextProvider,
      Provider<UtilityModule> utilityModuleProvider, Provider<Fragment> fragmentProvider,
      Provider<PermissionModule> permissionModelProvider) {
    this.contextProvider = contextProvider;
    this.utilityModuleProvider = utilityModuleProvider;
    this.fragmentProvider = fragmentProvider;
    this.permissionModelProvider = permissionModelProvider;
  }

  @Override
  public GoogleMapModule get() {
    return newInstance(contextProvider.get(), utilityModuleProvider.get(), fragmentProvider.get(), permissionModelProvider.get());
  }

  public static GoogleMapModule_Factory create(Provider<Context> contextProvider,
      Provider<UtilityModule> utilityModuleProvider, Provider<Fragment> fragmentProvider,
      Provider<PermissionModule> permissionModelProvider) {
    return new GoogleMapModule_Factory(contextProvider, utilityModuleProvider, fragmentProvider, permissionModelProvider);
  }

  public static GoogleMapModule newInstance(Context context, UtilityModule utilityModule,
      Fragment fragment, PermissionModule permissionModel) {
    return new GoogleMapModule(context, utilityModule, fragment, permissionModel);
  }
}
