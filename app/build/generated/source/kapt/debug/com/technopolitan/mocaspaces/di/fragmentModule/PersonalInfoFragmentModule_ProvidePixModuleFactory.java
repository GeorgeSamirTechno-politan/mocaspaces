// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.app.Activity;
import androidx.fragment.app.Fragment;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.PermissionModule;
import com.technopolitan.mocaspaces.modules.PikItModule;
import com.technopolitan.mocaspaces.modules.PixModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PersonalInfoFragmentModule_ProvidePixModuleFactory implements Factory<PixModule> {
  private final PersonalInfoFragmentModule module;

  private final Provider<PermissionModule> permissionModuleProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  private final Provider<Activity> activityProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<PikItModule> pikItModuleProvider;

  public PersonalInfoFragmentModule_ProvidePixModuleFactory(PersonalInfoFragmentModule module,
      Provider<PermissionModule> permissionModuleProvider,
      Provider<NavigationModule> navigationModuleProvider, Provider<Activity> activityProvider,
      Provider<Fragment> fragmentProvider, Provider<PikItModule> pikItModuleProvider) {
    this.module = module;
    this.permissionModuleProvider = permissionModuleProvider;
    this.navigationModuleProvider = navigationModuleProvider;
    this.activityProvider = activityProvider;
    this.fragmentProvider = fragmentProvider;
    this.pikItModuleProvider = pikItModuleProvider;
  }

  @Override
  public PixModule get() {
    return providePixModule(module, permissionModuleProvider.get(), navigationModuleProvider.get(), activityProvider.get(), fragmentProvider.get(), pikItModuleProvider.get());
  }

  public static PersonalInfoFragmentModule_ProvidePixModuleFactory create(
      PersonalInfoFragmentModule module, Provider<PermissionModule> permissionModuleProvider,
      Provider<NavigationModule> navigationModuleProvider, Provider<Activity> activityProvider,
      Provider<Fragment> fragmentProvider, Provider<PikItModule> pikItModuleProvider) {
    return new PersonalInfoFragmentModule_ProvidePixModuleFactory(module, permissionModuleProvider, navigationModuleProvider, activityProvider, fragmentProvider, pikItModuleProvider);
  }

  public static PixModule providePixModule(PersonalInfoFragmentModule instance,
      PermissionModule permissionModule, NavigationModule navigationModule, Activity activity,
      Fragment fragment, PikItModule pikItModule) {
    return Preconditions.checkNotNullFromProvides(instance.providePixModule(permissionModule, navigationModule, activity, fragment, pikItModule));
  }
}
