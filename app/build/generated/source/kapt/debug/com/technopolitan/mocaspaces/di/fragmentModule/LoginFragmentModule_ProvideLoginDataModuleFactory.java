// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.content.Context;
import androidx.fragment.app.Fragment;
import com.technopolitan.mocaspaces.data.login.LoginDataModule;
import com.technopolitan.mocaspaces.data.shared.OtpBlockUserModule;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.RXModule;
import com.technopolitan.mocaspaces.modules.SharedPrefModule;
import com.technopolitan.mocaspaces.modules.ValidationModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginFragmentModule_ProvideLoginDataModuleFactory implements Factory<LoginDataModule> {
  private final LoginFragmentModule module;

  private final Provider<Context> contextProvider;

  private final Provider<ValidationModule> validationModuleProvider;

  private final Provider<RXModule> rxModuleProvider;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  private final Provider<OtpBlockUserModule> otpBlockUserModuleProvider;

  public LoginFragmentModule_ProvideLoginDataModuleFactory(LoginFragmentModule module,
      Provider<Context> contextProvider, Provider<ValidationModule> validationModuleProvider,
      Provider<RXModule> rxModuleProvider, Provider<SharedPrefModule> sharedPrefModuleProvider,
      Provider<Fragment> fragmentProvider, Provider<NavigationModule> navigationModuleProvider,
      Provider<OtpBlockUserModule> otpBlockUserModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.validationModuleProvider = validationModuleProvider;
    this.rxModuleProvider = rxModuleProvider;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
    this.fragmentProvider = fragmentProvider;
    this.navigationModuleProvider = navigationModuleProvider;
    this.otpBlockUserModuleProvider = otpBlockUserModuleProvider;
  }

  @Override
  public LoginDataModule get() {
    return provideLoginDataModule(module, contextProvider.get(), validationModuleProvider.get(), rxModuleProvider.get(), sharedPrefModuleProvider.get(), fragmentProvider.get(), navigationModuleProvider.get(), otpBlockUserModuleProvider.get());
  }

  public static LoginFragmentModule_ProvideLoginDataModuleFactory create(LoginFragmentModule module,
      Provider<Context> contextProvider, Provider<ValidationModule> validationModuleProvider,
      Provider<RXModule> rxModuleProvider, Provider<SharedPrefModule> sharedPrefModuleProvider,
      Provider<Fragment> fragmentProvider, Provider<NavigationModule> navigationModuleProvider,
      Provider<OtpBlockUserModule> otpBlockUserModuleProvider) {
    return new LoginFragmentModule_ProvideLoginDataModuleFactory(module, contextProvider, validationModuleProvider, rxModuleProvider, sharedPrefModuleProvider, fragmentProvider, navigationModuleProvider, otpBlockUserModuleProvider);
  }

  public static LoginDataModule provideLoginDataModule(LoginFragmentModule instance,
      Context context, ValidationModule validationModule, RXModule rxModule,
      SharedPrefModule sharedPrefModule, Fragment fragment, NavigationModule navigationModule,
      OtpBlockUserModule otpBlockUserModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginDataModule(context, validationModule, rxModule, sharedPrefModule, fragment, navigationModule, otpBlockUserModule));
  }
}
