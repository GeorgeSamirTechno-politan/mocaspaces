// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.app.Activity;
import android.content.Context;
import androidx.fragment.app.Fragment;
import com.technopolitan.mocaspaces.modules.CompressModule;
import com.technopolitan.mocaspaces.modules.UtilityModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ScanningFragmentModule_ProvideCompressModuleFactory implements Factory<CompressModule> {
  private final ScanningFragmentModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<UtilityModule> utilityModuleProvider;

  private final Provider<Activity> activityProvider;

  public ScanningFragmentModule_ProvideCompressModuleFactory(ScanningFragmentModule module,
      Provider<Context> contextProvider, Provider<Fragment> fragmentProvider,
      Provider<UtilityModule> utilityModuleProvider, Provider<Activity> activityProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.fragmentProvider = fragmentProvider;
    this.utilityModuleProvider = utilityModuleProvider;
    this.activityProvider = activityProvider;
  }

  @Override
  public CompressModule get() {
    return provideCompressModule(module, contextProvider.get(), fragmentProvider.get(), utilityModuleProvider.get(), activityProvider.get());
  }

  public static ScanningFragmentModule_ProvideCompressModuleFactory create(
      ScanningFragmentModule module, Provider<Context> contextProvider,
      Provider<Fragment> fragmentProvider, Provider<UtilityModule> utilityModuleProvider,
      Provider<Activity> activityProvider) {
    return new ScanningFragmentModule_ProvideCompressModuleFactory(module, contextProvider, fragmentProvider, utilityModuleProvider, activityProvider);
  }

  public static CompressModule provideCompressModule(ScanningFragmentModule instance,
      Context context, Fragment fragment, UtilityModule utilityModule, Activity activity) {
    return Preconditions.checkNotNullFromProvides(instance.provideCompressModule(context, fragment, utilityModule, activity));
  }
}
