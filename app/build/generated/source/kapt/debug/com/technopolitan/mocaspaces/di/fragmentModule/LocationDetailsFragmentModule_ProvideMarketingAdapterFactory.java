// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import com.technopolitan.mocaspaces.data.locationDetails.MarketingAdapter;
import com.technopolitan.mocaspaces.modules.GlideModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationDetailsFragmentModule_ProvideMarketingAdapterFactory implements Factory<MarketingAdapter> {
  private final LocationDetailsFragmentModule module;

  private final Provider<GlideModule> glideModuleProvider;

  public LocationDetailsFragmentModule_ProvideMarketingAdapterFactory(
      LocationDetailsFragmentModule module, Provider<GlideModule> glideModuleProvider) {
    this.module = module;
    this.glideModuleProvider = glideModuleProvider;
  }

  @Override
  public MarketingAdapter get() {
    return provideMarketingAdapter(module, glideModuleProvider.get());
  }

  public static LocationDetailsFragmentModule_ProvideMarketingAdapterFactory create(
      LocationDetailsFragmentModule module, Provider<GlideModule> glideModuleProvider) {
    return new LocationDetailsFragmentModule_ProvideMarketingAdapterFactory(module, glideModuleProvider);
  }

  public static MarketingAdapter provideMarketingAdapter(LocationDetailsFragmentModule instance,
      GlideModule glideModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideMarketingAdapter(glideModule));
  }
}
