// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.content.Context;
import com.technopolitan.mocaspaces.data.memberType.MemberTypeAdapter;
import com.technopolitan.mocaspaces.data.personalInfo.PersonalInfoDataModule;
import com.technopolitan.mocaspaces.data.shared.CountDownModule;
import com.technopolitan.mocaspaces.modules.DateTimeModule;
import com.technopolitan.mocaspaces.modules.DialogModule;
import com.technopolitan.mocaspaces.modules.GlideModule;
import com.technopolitan.mocaspaces.modules.PixModule;
import com.technopolitan.mocaspaces.modules.RXModule;
import com.technopolitan.mocaspaces.modules.UtilityModule;
import com.technopolitan.mocaspaces.modules.ValidationModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PersonalInfoFragmentModule_ProvidePersonalInfoDataModuleFactory implements Factory<PersonalInfoDataModule> {
  private final PersonalInfoFragmentModule module;

  private final Provider<Context> contextProvider;

  private final Provider<RXModule> rxModuleProvider;

  private final Provider<PixModule> pixModuleProvider;

  private final Provider<ValidationModule> validationModuleProvider;

  private final Provider<CountDownModule> countDownModuleProvider;

  private final Provider<GlideModule> glideModuleProvider;

  private final Provider<MemberTypeAdapter> memberTypeAdapterProvider;

  private final Provider<DialogModule> dialogModuleProvider;

  private final Provider<DateTimeModule> dateTimeModuleProvider;

  private final Provider<UtilityModule> utilityModuleProvider;

  public PersonalInfoFragmentModule_ProvidePersonalInfoDataModuleFactory(
      PersonalInfoFragmentModule module, Provider<Context> contextProvider,
      Provider<RXModule> rxModuleProvider, Provider<PixModule> pixModuleProvider,
      Provider<ValidationModule> validationModuleProvider,
      Provider<CountDownModule> countDownModuleProvider, Provider<GlideModule> glideModuleProvider,
      Provider<MemberTypeAdapter> memberTypeAdapterProvider,
      Provider<DialogModule> dialogModuleProvider, Provider<DateTimeModule> dateTimeModuleProvider,
      Provider<UtilityModule> utilityModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.rxModuleProvider = rxModuleProvider;
    this.pixModuleProvider = pixModuleProvider;
    this.validationModuleProvider = validationModuleProvider;
    this.countDownModuleProvider = countDownModuleProvider;
    this.glideModuleProvider = glideModuleProvider;
    this.memberTypeAdapterProvider = memberTypeAdapterProvider;
    this.dialogModuleProvider = dialogModuleProvider;
    this.dateTimeModuleProvider = dateTimeModuleProvider;
    this.utilityModuleProvider = utilityModuleProvider;
  }

  @Override
  public PersonalInfoDataModule get() {
    return providePersonalInfoDataModule(module, contextProvider.get(), rxModuleProvider.get(), pixModuleProvider.get(), validationModuleProvider.get(), countDownModuleProvider.get(), glideModuleProvider.get(), memberTypeAdapterProvider.get(), dialogModuleProvider.get(), dateTimeModuleProvider.get(), utilityModuleProvider.get());
  }

  public static PersonalInfoFragmentModule_ProvidePersonalInfoDataModuleFactory create(
      PersonalInfoFragmentModule module, Provider<Context> contextProvider,
      Provider<RXModule> rxModuleProvider, Provider<PixModule> pixModuleProvider,
      Provider<ValidationModule> validationModuleProvider,
      Provider<CountDownModule> countDownModuleProvider, Provider<GlideModule> glideModuleProvider,
      Provider<MemberTypeAdapter> memberTypeAdapterProvider,
      Provider<DialogModule> dialogModuleProvider, Provider<DateTimeModule> dateTimeModuleProvider,
      Provider<UtilityModule> utilityModuleProvider) {
    return new PersonalInfoFragmentModule_ProvidePersonalInfoDataModuleFactory(module, contextProvider, rxModuleProvider, pixModuleProvider, validationModuleProvider, countDownModuleProvider, glideModuleProvider, memberTypeAdapterProvider, dialogModuleProvider, dateTimeModuleProvider, utilityModuleProvider);
  }

  public static PersonalInfoDataModule providePersonalInfoDataModule(
      PersonalInfoFragmentModule instance, Context context, RXModule rxModule, PixModule pixModule,
      ValidationModule validationModule, CountDownModule countDownModule, GlideModule glideModule,
      MemberTypeAdapter memberTypeAdapter, DialogModule dialogModule, DateTimeModule dateTimeModule,
      UtilityModule utilityModule) {
    return Preconditions.checkNotNullFromProvides(instance.providePersonalInfoDataModule(context, rxModule, pixModule, validationModule, countDownModule, glideModule, memberTypeAdapter, dialogModule, dateTimeModule, utilityModule));
  }
}
