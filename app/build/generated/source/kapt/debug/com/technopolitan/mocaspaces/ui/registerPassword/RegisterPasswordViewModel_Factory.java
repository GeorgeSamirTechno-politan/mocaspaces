// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.ui.registerPassword;

import com.technopolitan.mocaspaces.data.remote.RegisterRemote;
import com.technopolitan.mocaspaces.data.shared.PasswordDataModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterPasswordViewModel_Factory implements Factory<RegisterPasswordViewModel> {
  private final Provider<PasswordDataModule> passwordDataModuleProvider;

  private final Provider<RegisterRemote> registerRemoteProvider;

  public RegisterPasswordViewModel_Factory(Provider<PasswordDataModule> passwordDataModuleProvider,
      Provider<RegisterRemote> registerRemoteProvider) {
    this.passwordDataModuleProvider = passwordDataModuleProvider;
    this.registerRemoteProvider = registerRemoteProvider;
  }

  @Override
  public RegisterPasswordViewModel get() {
    return newInstance(passwordDataModuleProvider.get(), registerRemoteProvider.get());
  }

  public static RegisterPasswordViewModel_Factory create(
      Provider<PasswordDataModule> passwordDataModuleProvider,
      Provider<RegisterRemote> registerRemoteProvider) {
    return new RegisterPasswordViewModel_Factory(passwordDataModuleProvider, registerRemoteProvider);
  }

  public static RegisterPasswordViewModel newInstance(PasswordDataModule passwordDataModule,
      RegisterRemote registerRemote) {
    return new RegisterPasswordViewModel(passwordDataModule, registerRemote);
  }
}
