// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.ui.fragmentUtilities;

import com.technopolitan.mocaspaces.modules.CameraXModule;
import com.technopolitan.mocaspaces.modules.ImagePickerModule;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.PermissionModule;
import com.technopolitan.mocaspaces.modules.PikItModule;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CustomCameraXFragment_MembersInjector implements MembersInjector<CustomCameraXFragment> {
  private final Provider<PermissionModule> permissionModuleProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  private final Provider<ImagePickerModule> imagePickerModuleProvider;

  private final Provider<PikItModule> pikItModuleProvider;

  private final Provider<CameraXModule> cameraXModuleProvider;

  public CustomCameraXFragment_MembersInjector(Provider<PermissionModule> permissionModuleProvider,
      Provider<NavigationModule> navigationModuleProvider,
      Provider<ImagePickerModule> imagePickerModuleProvider,
      Provider<PikItModule> pikItModuleProvider, Provider<CameraXModule> cameraXModuleProvider) {
    this.permissionModuleProvider = permissionModuleProvider;
    this.navigationModuleProvider = navigationModuleProvider;
    this.imagePickerModuleProvider = imagePickerModuleProvider;
    this.pikItModuleProvider = pikItModuleProvider;
    this.cameraXModuleProvider = cameraXModuleProvider;
  }

  public static MembersInjector<CustomCameraXFragment> create(
      Provider<PermissionModule> permissionModuleProvider,
      Provider<NavigationModule> navigationModuleProvider,
      Provider<ImagePickerModule> imagePickerModuleProvider,
      Provider<PikItModule> pikItModuleProvider, Provider<CameraXModule> cameraXModuleProvider) {
    return new CustomCameraXFragment_MembersInjector(permissionModuleProvider, navigationModuleProvider, imagePickerModuleProvider, pikItModuleProvider, cameraXModuleProvider);
  }

  @Override
  public void injectMembers(CustomCameraXFragment instance) {
    injectPermissionModule(instance, permissionModuleProvider.get());
    injectNavigationModule(instance, navigationModuleProvider.get());
    injectImagePickerModule(instance, imagePickerModuleProvider.get());
    injectPikItModule(instance, pikItModuleProvider.get());
    injectCameraXModule(instance, cameraXModuleProvider.get());
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment.permissionModule")
  public static void injectPermissionModule(CustomCameraXFragment instance,
      PermissionModule permissionModule) {
    instance.permissionModule = permissionModule;
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment.navigationModule")
  public static void injectNavigationModule(CustomCameraXFragment instance,
      NavigationModule navigationModule) {
    instance.navigationModule = navigationModule;
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment.imagePickerModule")
  public static void injectImagePickerModule(CustomCameraXFragment instance,
      ImagePickerModule imagePickerModule) {
    instance.imagePickerModule = imagePickerModule;
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment.pikItModule")
  public static void injectPikItModule(CustomCameraXFragment instance, PikItModule pikItModule) {
    instance.pikItModule = pikItModule;
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment.cameraXModule")
  public static void injectCameraXModule(CustomCameraXFragment instance,
      CameraXModule cameraXModule) {
    instance.cameraXModule = cameraXModule;
  }
}
