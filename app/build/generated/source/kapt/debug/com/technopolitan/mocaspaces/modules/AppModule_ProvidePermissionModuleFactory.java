// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import android.app.Activity;
import android.content.Context;
import androidx.fragment.app.Fragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidePermissionModuleFactory implements Factory<PermissionModule> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Activity> activityProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<CustomAlertModule> alertModuleProvider;

  private final Provider<DialogModule> dialogModuleProvider;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  public AppModule_ProvidePermissionModuleFactory(AppModule module,
      Provider<Context> contextProvider, Provider<Activity> activityProvider,
      Provider<Fragment> fragmentProvider, Provider<CustomAlertModule> alertModuleProvider,
      Provider<DialogModule> dialogModuleProvider,
      Provider<SharedPrefModule> sharedPrefModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.activityProvider = activityProvider;
    this.fragmentProvider = fragmentProvider;
    this.alertModuleProvider = alertModuleProvider;
    this.dialogModuleProvider = dialogModuleProvider;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
  }

  @Override
  public PermissionModule get() {
    return providePermissionModule(module, contextProvider.get(), activityProvider.get(), fragmentProvider.get(), alertModuleProvider.get(), dialogModuleProvider.get(), sharedPrefModuleProvider.get());
  }

  public static AppModule_ProvidePermissionModuleFactory create(AppModule module,
      Provider<Context> contextProvider, Provider<Activity> activityProvider,
      Provider<Fragment> fragmentProvider, Provider<CustomAlertModule> alertModuleProvider,
      Provider<DialogModule> dialogModuleProvider,
      Provider<SharedPrefModule> sharedPrefModuleProvider) {
    return new AppModule_ProvidePermissionModuleFactory(module, contextProvider, activityProvider, fragmentProvider, alertModuleProvider, dialogModuleProvider, sharedPrefModuleProvider);
  }

  public static PermissionModule providePermissionModule(AppModule instance, Context context,
      Activity activity, Fragment fragment, CustomAlertModule alertModule,
      DialogModule dialogModule, SharedPrefModule sharedPrefModule) {
    return Preconditions.checkNotNullFromProvides(instance.providePermissionModule(context, activity, fragment, alertModule, dialogModule, sharedPrefModule));
  }
}
