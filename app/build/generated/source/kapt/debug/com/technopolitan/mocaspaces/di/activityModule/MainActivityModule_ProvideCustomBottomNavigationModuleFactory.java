// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.activityModule;

import android.app.Activity;
import android.content.Context;
import com.technopolitan.mocaspaces.data.main.CustomBottomNavigationModule;
import com.technopolitan.mocaspaces.modules.GlideModule;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.SharedPrefModule;
import com.technopolitan.mocaspaces.modules.UtilityModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivityModule_ProvideCustomBottomNavigationModuleFactory implements Factory<CustomBottomNavigationModule> {
  private final MainActivityModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Activity> activityProvider;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  private final Provider<GlideModule> glideModuleProvider;

  private final Provider<UtilityModule> utilityModuleProvider;

  public MainActivityModule_ProvideCustomBottomNavigationModuleFactory(MainActivityModule module,
      Provider<Context> contextProvider, Provider<Activity> activityProvider,
      Provider<SharedPrefModule> sharedPrefModuleProvider,
      Provider<NavigationModule> navigationModuleProvider,
      Provider<GlideModule> glideModuleProvider, Provider<UtilityModule> utilityModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.activityProvider = activityProvider;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
    this.navigationModuleProvider = navigationModuleProvider;
    this.glideModuleProvider = glideModuleProvider;
    this.utilityModuleProvider = utilityModuleProvider;
  }

  @Override
  public CustomBottomNavigationModule get() {
    return provideCustomBottomNavigationModule(module, contextProvider.get(), activityProvider.get(), sharedPrefModuleProvider.get(), navigationModuleProvider.get(), glideModuleProvider.get(), utilityModuleProvider.get());
  }

  public static MainActivityModule_ProvideCustomBottomNavigationModuleFactory create(
      MainActivityModule module, Provider<Context> contextProvider,
      Provider<Activity> activityProvider, Provider<SharedPrefModule> sharedPrefModuleProvider,
      Provider<NavigationModule> navigationModuleProvider,
      Provider<GlideModule> glideModuleProvider, Provider<UtilityModule> utilityModuleProvider) {
    return new MainActivityModule_ProvideCustomBottomNavigationModuleFactory(module, contextProvider, activityProvider, sharedPrefModuleProvider, navigationModuleProvider, glideModuleProvider, utilityModuleProvider);
  }

  public static CustomBottomNavigationModule provideCustomBottomNavigationModule(
      MainActivityModule instance, Context context, Activity activity,
      SharedPrefModule sharedPrefModule, NavigationModule navigationModule, GlideModule glideModule,
      UtilityModule utilityModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideCustomBottomNavigationModule(context, activity, sharedPrefModule, navigationModule, glideModule, utilityModule));
  }
}
