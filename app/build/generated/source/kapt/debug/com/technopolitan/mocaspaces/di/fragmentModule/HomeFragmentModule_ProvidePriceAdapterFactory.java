// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import com.technopolitan.mocaspaces.data.home.PriceAdapter;
import com.technopolitan.mocaspaces.data.shared.CountDownModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeFragmentModule_ProvidePriceAdapterFactory implements Factory<PriceAdapter> {
  private final HomeFragmentModule module;

  private final Provider<CountDownModule> countDownModuleProvider;

  public HomeFragmentModule_ProvidePriceAdapterFactory(HomeFragmentModule module,
      Provider<CountDownModule> countDownModuleProvider) {
    this.module = module;
    this.countDownModuleProvider = countDownModuleProvider;
  }

  @Override
  public PriceAdapter get() {
    return providePriceAdapter(module, countDownModuleProvider.get());
  }

  public static HomeFragmentModule_ProvidePriceAdapterFactory create(HomeFragmentModule module,
      Provider<CountDownModule> countDownModuleProvider) {
    return new HomeFragmentModule_ProvidePriceAdapterFactory(module, countDownModuleProvider);
  }

  public static PriceAdapter providePriceAdapter(HomeFragmentModule instance,
      CountDownModule countDownModule) {
    return Preconditions.checkNotNullFromProvides(instance.providePriceAdapter(countDownModule));
  }
}
