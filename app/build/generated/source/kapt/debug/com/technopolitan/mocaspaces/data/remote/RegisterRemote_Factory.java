// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.data.remote;

import com.technopolitan.mocaspaces.modules.NetworkModule;
import com.technopolitan.mocaspaces.modules.UtilityModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterRemote_Factory implements Factory<RegisterRemote> {
  private final Provider<NetworkModule> networkModuleProvider;

  private final Provider<UtilityModule> utilityModuleProvider;

  public RegisterRemote_Factory(Provider<NetworkModule> networkModuleProvider,
      Provider<UtilityModule> utilityModuleProvider) {
    this.networkModuleProvider = networkModuleProvider;
    this.utilityModuleProvider = utilityModuleProvider;
  }

  @Override
  public RegisterRemote get() {
    return newInstance(networkModuleProvider.get(), utilityModuleProvider.get());
  }

  public static RegisterRemote_Factory create(Provider<NetworkModule> networkModuleProvider,
      Provider<UtilityModule> utilityModuleProvider) {
    return new RegisterRemote_Factory(networkModuleProvider, utilityModuleProvider);
  }

  public static RegisterRemote newInstance(NetworkModule networkModule,
      UtilityModule utilityModule) {
    return new RegisterRemote(networkModule, utilityModule);
  }
}
