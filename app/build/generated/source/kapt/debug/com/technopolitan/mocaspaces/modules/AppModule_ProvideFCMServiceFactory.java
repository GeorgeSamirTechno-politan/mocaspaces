// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import com.technopolitan.mocaspaces.services.FCMService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideFCMServiceFactory implements Factory<FCMService> {
  private final AppModule module;

  private final Provider<NotificationModule> notificationModuleProvider;

  public AppModule_ProvideFCMServiceFactory(AppModule module,
      Provider<NotificationModule> notificationModuleProvider) {
    this.module = module;
    this.notificationModuleProvider = notificationModuleProvider;
  }

  @Override
  public FCMService get() {
    return provideFCMService(module, notificationModuleProvider.get());
  }

  public static AppModule_ProvideFCMServiceFactory create(AppModule module,
      Provider<NotificationModule> notificationModuleProvider) {
    return new AppModule_ProvideFCMServiceFactory(module, notificationModuleProvider);
  }

  public static FCMService provideFCMService(AppModule instance,
      NotificationModule notificationModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideFCMService(notificationModule));
  }
}
