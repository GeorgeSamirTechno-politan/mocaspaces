// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import android.app.Activity;
import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDialogModuleFactory implements Factory<DialogModule> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Activity> activityProvider;

  private final Provider<NavigationModule> navigationModuleProvider;

  public AppModule_ProvideDialogModuleFactory(AppModule module, Provider<Context> contextProvider,
      Provider<Activity> activityProvider, Provider<NavigationModule> navigationModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.activityProvider = activityProvider;
    this.navigationModuleProvider = navigationModuleProvider;
  }

  @Override
  public DialogModule get() {
    return provideDialogModule(module, contextProvider.get(), activityProvider.get(), navigationModuleProvider.get());
  }

  public static AppModule_ProvideDialogModuleFactory create(AppModule module,
      Provider<Context> contextProvider, Provider<Activity> activityProvider,
      Provider<NavigationModule> navigationModuleProvider) {
    return new AppModule_ProvideDialogModuleFactory(module, contextProvider, activityProvider, navigationModuleProvider);
  }

  public static DialogModule provideDialogModule(AppModule instance, Context context,
      Activity activity, NavigationModule navigationModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideDialogModule(context, activity, navigationModule));
  }
}
