// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import android.app.Activity;
import androidx.fragment.app.Fragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNavigationModuleFactory implements Factory<NavigationModule> {
  private final AppModule module;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<Activity> activityProvider;

  public AppModule_ProvideNavigationModuleFactory(AppModule module,
      Provider<Fragment> fragmentProvider, Provider<Activity> activityProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
    this.activityProvider = activityProvider;
  }

  @Override
  public NavigationModule get() {
    return provideNavigationModule(module, fragmentProvider.get(), activityProvider.get());
  }

  public static AppModule_ProvideNavigationModuleFactory create(AppModule module,
      Provider<Fragment> fragmentProvider, Provider<Activity> activityProvider) {
    return new AppModule_ProvideNavigationModuleFactory(module, fragmentProvider, activityProvider);
  }

  public static NavigationModule provideNavigationModule(AppModule instance, Fragment fragment,
      Activity activity) {
    return Preconditions.checkNotNullFromProvides(instance.provideNavigationModule(fragment, activity));
  }
}
