// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import com.technopolitan.mocaspaces.network.ServiceInterface;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideServiceFactory implements Factory<ServiceInterface> {
  private final NetworkModule module;

  private final Provider<String> serviceNameProvider;

  public NetworkModule_ProvideServiceFactory(NetworkModule module,
      Provider<String> serviceNameProvider) {
    this.module = module;
    this.serviceNameProvider = serviceNameProvider;
  }

  @Override
  public ServiceInterface get() {
    return provideService(module, serviceNameProvider.get());
  }

  public static NetworkModule_ProvideServiceFactory create(NetworkModule module,
      Provider<String> serviceNameProvider) {
    return new NetworkModule_ProvideServiceFactory(module, serviceNameProvider);
  }

  public static ServiceInterface provideService(NetworkModule instance, String serviceName) {
    return Preconditions.checkNotNullFromProvides(instance.provideService(serviceName));
  }
}
