// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.modules;

import android.app.Activity;
import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideUtilityModuleFactory implements Factory<UtilityModule> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Activity> activityProvider;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  public AppModule_ProvideUtilityModuleFactory(AppModule module, Provider<Context> contextProvider,
      Provider<Activity> activityProvider, Provider<SharedPrefModule> sharedPrefModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.activityProvider = activityProvider;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
  }

  @Override
  public UtilityModule get() {
    return provideUtilityModule(module, contextProvider.get(), activityProvider.get(), sharedPrefModuleProvider.get());
  }

  public static AppModule_ProvideUtilityModuleFactory create(AppModule module,
      Provider<Context> contextProvider, Provider<Activity> activityProvider,
      Provider<SharedPrefModule> sharedPrefModuleProvider) {
    return new AppModule_ProvideUtilityModuleFactory(module, contextProvider, activityProvider, sharedPrefModuleProvider);
  }

  public static UtilityModule provideUtilityModule(AppModule instance, Context context,
      Activity activity, SharedPrefModule sharedPrefModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideUtilityModule(context, activity, sharedPrefModule));
  }
}
