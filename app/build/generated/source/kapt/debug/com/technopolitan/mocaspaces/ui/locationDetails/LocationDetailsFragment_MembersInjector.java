// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.ui.locationDetails;

import com.technopolitan.mocaspaces.di.viewModel.ViewModelFactory;
import com.technopolitan.mocaspaces.modules.GoogleMapModule;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationDetailsFragment_MembersInjector implements MembersInjector<LocationDetailsFragment> {
  private final Provider<GoogleMapModule> googleMapModuleProvider;

  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  public LocationDetailsFragment_MembersInjector(Provider<GoogleMapModule> googleMapModuleProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    this.googleMapModuleProvider = googleMapModuleProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<LocationDetailsFragment> create(
      Provider<GoogleMapModule> googleMapModuleProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    return new LocationDetailsFragment_MembersInjector(googleMapModuleProvider, viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(LocationDetailsFragment instance) {
    injectGoogleMapModule(instance, googleMapModuleProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.locationDetails.LocationDetailsFragment.googleMapModule")
  public static void injectGoogleMapModule(LocationDetailsFragment instance,
      GoogleMapModule googleMapModule) {
    instance.googleMapModule = googleMapModule;
  }

  @InjectedFieldSignature("com.technopolitan.mocaspaces.ui.locationDetails.LocationDetailsFragment.viewModelFactory")
  public static void injectViewModelFactory(LocationDetailsFragment instance,
      ViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
