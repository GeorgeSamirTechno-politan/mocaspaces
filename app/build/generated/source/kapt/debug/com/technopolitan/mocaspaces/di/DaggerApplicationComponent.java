// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di;

import android.app.Activity;
import android.content.Context;
import androidx.fragment.app.Fragment;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.technopolitan.mocaspaces.data.DropDownMapper;
import com.technopolitan.mocaspaces.data.checkMobile.CheckMobileDataModule;
import com.technopolitan.mocaspaces.data.country.CountryDataModule;
import com.technopolitan.mocaspaces.data.country.CountryMapper;
import com.technopolitan.mocaspaces.data.customPowerMenu.CustomIconMenuAdapter;
import com.technopolitan.mocaspaces.data.gender.GenderMapper;
import com.technopolitan.mocaspaces.data.home.AmenityAdapter;
import com.technopolitan.mocaspaces.data.home.HomeViewPagerAdapter;
import com.technopolitan.mocaspaces.data.home.MeetingRoomAdapter;
import com.technopolitan.mocaspaces.data.home.PriceViewPagerAdapter;
import com.technopolitan.mocaspaces.data.home.WorkSpaceAdapter;
import com.technopolitan.mocaspaces.data.login.LoginDataModule;
import com.technopolitan.mocaspaces.data.login.LoginMapper;
import com.technopolitan.mocaspaces.data.main.CustomBottomNavigationModule;
import com.technopolitan.mocaspaces.data.memberType.MemberTypeAdapter;
import com.technopolitan.mocaspaces.data.personalInfo.PersonalInfoDataModule;
import com.technopolitan.mocaspaces.data.register.RegisterDataModule;
import com.technopolitan.mocaspaces.data.remote.CheckMobileRemote;
import com.technopolitan.mocaspaces.data.remote.CheckOtpEmailRemote;
import com.technopolitan.mocaspaces.data.remote.CountryRemote;
import com.technopolitan.mocaspaces.data.remote.EventSpaceRemote;
import com.technopolitan.mocaspaces.data.remote.GenderRemote;
import com.technopolitan.mocaspaces.data.remote.LoginRemote;
import com.technopolitan.mocaspaces.data.remote.MainRemote;
import com.technopolitan.mocaspaces.data.remote.MeetingRoomRemote;
import com.technopolitan.mocaspaces.data.remote.MemberTypeRemote;
import com.technopolitan.mocaspaces.data.remote.PersonalInfoRemote;
import com.technopolitan.mocaspaces.data.remote.RegisterRemote;
import com.technopolitan.mocaspaces.data.remote.ResetPasswordRemote;
import com.technopolitan.mocaspaces.data.remote.SendOtpEmailRemote;
import com.technopolitan.mocaspaces.data.remote.SendOtpForgotPasswordMobile;
import com.technopolitan.mocaspaces.data.remote.VerifyMobileOtpForgotPasswordRemote;
import com.technopolitan.mocaspaces.data.remote.VerifyMobileOtpRemote;
import com.technopolitan.mocaspaces.data.remote.WorkSpaceRemote;
import com.technopolitan.mocaspaces.data.shared.CountDownModule;
import com.technopolitan.mocaspaces.data.shared.MemberTypeViewModel;
import com.technopolitan.mocaspaces.data.shared.OTPDataModule;
import com.technopolitan.mocaspaces.data.shared.OtpBlockUserModule;
import com.technopolitan.mocaspaces.data.shared.PasswordDataModule;
import com.technopolitan.mocaspaces.data.studentVerify.StudentVerifyDataModule;
import com.technopolitan.mocaspaces.models.location.mappers.WorkSpaceMapper;
import com.technopolitan.mocaspaces.models.meeting.MeetingRoomMapper;
import com.technopolitan.mocaspaces.modules.ApiResponseModule;
import com.technopolitan.mocaspaces.modules.AppDefaultModule;
import com.technopolitan.mocaspaces.modules.AppModule;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideAppDefaultModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideConnectionStateLiveDataModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideCountDownModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideCustomAlertModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideDateTimeModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideDialogModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideGlideModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideNavigationModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideNetworkModelFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideOkHttpClientFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideOtpBlocUserModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvidePermissionModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvidePikItModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideRXModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideSharedPrefModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideSpannableStringModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideUtilityModuleFactory;
import com.technopolitan.mocaspaces.modules.AppModule_ProvideValidationModuleFactory;
import com.technopolitan.mocaspaces.modules.CameraXModule;
import com.technopolitan.mocaspaces.modules.CompressModule;
import com.technopolitan.mocaspaces.modules.ConnectionLiveDataModule;
import com.technopolitan.mocaspaces.modules.CustomAlertModule;
import com.technopolitan.mocaspaces.modules.DateTimeModule;
import com.technopolitan.mocaspaces.modules.DialogModule;
import com.technopolitan.mocaspaces.modules.FaceDetectionModule;
import com.technopolitan.mocaspaces.modules.GlideModule;
import com.technopolitan.mocaspaces.modules.ImagePickerModule;
import com.technopolitan.mocaspaces.modules.LocationModule;
import com.technopolitan.mocaspaces.modules.NavigationModule;
import com.technopolitan.mocaspaces.modules.NetworkModule;
import com.technopolitan.mocaspaces.modules.OkHttpClient;
import com.technopolitan.mocaspaces.modules.PermissionModule;
import com.technopolitan.mocaspaces.modules.PikItModule;
import com.technopolitan.mocaspaces.modules.PixModule;
import com.technopolitan.mocaspaces.modules.PowerMenuModule;
import com.technopolitan.mocaspaces.modules.RXModule;
import com.technopolitan.mocaspaces.modules.SharedPrefModule;
import com.technopolitan.mocaspaces.modules.SmsIdentifierModule;
import com.technopolitan.mocaspaces.modules.SmsVerifyCatcherModule;
import com.technopolitan.mocaspaces.modules.SpannableStringModule;
import com.technopolitan.mocaspaces.modules.UtilityModule;
import com.technopolitan.mocaspaces.modules.ValidationModule;
import com.technopolitan.mocaspaces.ui.checkEmail.CheckEmailFragment;
import com.technopolitan.mocaspaces.ui.checkEmail.CheckEmailFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.checkEmail.CheckEmailViewModel;
import com.technopolitan.mocaspaces.ui.checkMobile.CheckMobileFragment;
import com.technopolitan.mocaspaces.ui.checkMobile.CheckMobileFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.checkMobile.CheckMobileViewModel;
import com.technopolitan.mocaspaces.ui.forgetPasswordMobile.ForgetPasswordMobileFragment;
import com.technopolitan.mocaspaces.ui.forgetPasswordMobile.ForgetPasswordMobileFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.forgetPasswordMobile.ForgetPasswordMobileViewModel;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.CustomCameraXFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.DatePickerFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.DatePickerFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.NoInternetFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.NoInternetFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.ScanningFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.ScanningFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.SingleButtonDialogFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.SingleButtonDialogFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.SuccessRegisterFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.SuccessRegisterFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.TwoChooseDialogFragment;
import com.technopolitan.mocaspaces.ui.fragmentUtilities.TwoChooseDialogFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.home.EventSpaceFragment;
import com.technopolitan.mocaspaces.ui.home.EventSpaceFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.home.HomeFragment;
import com.technopolitan.mocaspaces.ui.home.HomeFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.home.HomeViewModel;
import com.technopolitan.mocaspaces.ui.home.MeetingRoomFragment;
import com.technopolitan.mocaspaces.ui.home.MeetingRoomFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.home.WorkSpaceFragment;
import com.technopolitan.mocaspaces.ui.home.WorkSpaceFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.login.LoginFragment;
import com.technopolitan.mocaspaces.ui.login.LoginFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.login.LoginViewModel;
import com.technopolitan.mocaspaces.ui.main.MainActivity;
import com.technopolitan.mocaspaces.ui.main.MainActivity_MembersInjector;
import com.technopolitan.mocaspaces.ui.main.MainViewModel;
import com.technopolitan.mocaspaces.ui.mobileOTP.MobileOTPFragment;
import com.technopolitan.mocaspaces.ui.mobileOTP.MobileOTPFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.mobileOTP.MobileOTPViewModel;
import com.technopolitan.mocaspaces.ui.passwordSaved.PasswordSavedFragment;
import com.technopolitan.mocaspaces.ui.passwordSaved.PasswordSavedFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.personalInfo.PersonalInfoFragment;
import com.technopolitan.mocaspaces.ui.personalInfo.PersonalInfoFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.personalInfo.PersonalInfoViewModel;
import com.technopolitan.mocaspaces.ui.register.RegisterFragment;
import com.technopolitan.mocaspaces.ui.register.RegisterFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.register.RegisterViewModel;
import com.technopolitan.mocaspaces.ui.registerPassword.RegisterPasswordFragment;
import com.technopolitan.mocaspaces.ui.registerPassword.RegisterPasswordFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.registerPassword.RegisterPasswordViewModel;
import com.technopolitan.mocaspaces.ui.resetPassword.ResetPasswordFragment;
import com.technopolitan.mocaspaces.ui.resetPassword.ResetPasswordFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.resetPassword.ResetPasswordViewModel;
import com.technopolitan.mocaspaces.ui.resetPasswordOtp.ResetPasswordOtpFragment;
import com.technopolitan.mocaspaces.ui.resetPasswordOtp.ResetPasswordOtpFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.resetPasswordOtp.ResetPasswordOtpViewModel;
import com.technopolitan.mocaspaces.ui.sharedViewModel.CountryViewModel;
import com.technopolitan.mocaspaces.ui.splash.SplashFragment;
import com.technopolitan.mocaspaces.ui.splash.SplashFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.splash.SplashViewModel;
import com.technopolitan.mocaspaces.ui.start.StartFragment;
import com.technopolitan.mocaspaces.ui.start.StartFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.studentVerify.StudentVerifyFragment;
import com.technopolitan.mocaspaces.ui.studentVerify.StudentVerifyFragment_MembersInjector;
import com.technopolitan.mocaspaces.ui.studentVerify.StudentVerifyViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static ApplicationComponent.AppComponentFactory factory() {
    return new Factory();
  }

  private static final class Factory implements ApplicationComponent.AppComponentFactory {
    @Override
    public ApplicationComponent buildDi(Context context, Activity activity, Fragment fragment) {
      Preconditions.checkNotNull(context);
      Preconditions.checkNotNull(activity);
      return new ApplicationComponentImpl(new AppModule(), context, activity, fragment);
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final Context context;

    private final Activity activity;

    private final Fragment fragment;

    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<Context> contextProvider;

    private Provider<AppDefaultModule> provideAppDefaultModuleProvider;

    private Provider<SharedPrefModule> provideSharedPrefModuleProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<NetworkModule> provideNetworkModelProvider;

    private Provider<ConnectionLiveDataModule> provideConnectionStateLiveDataModuleProvider;

    private Provider<Fragment> fragmentProvider;

    private Provider<Activity> activityProvider;

    private Provider<NavigationModule> provideNavigationModuleProvider;

    private Provider<GlideModule> provideGlideModuleProvider;

    private Provider<DialogModule> provideDialogModuleProvider;

    private Provider<CustomAlertModule> provideCustomAlertModuleProvider;

    private Provider<PermissionModule> providePermissionModuleProvider;

    private Provider<PikItModule> providePikItModuleProvider;

    private Provider<UtilityModule> provideUtilityModuleProvider;

    private Provider<DateTimeModule> provideDateTimeModuleProvider;

    private Provider<CountDownModule> provideCountDownModuleProvider;

    private Provider<OtpBlockUserModule> provideOtpBlocUserModuleProvider;

    private Provider<ValidationModule> provideValidationModuleProvider;

    private Provider<RXModule> provideRXModuleProvider;

    private Provider<SpannableStringModule> provideSpannableStringModuleProvider;

    private ApplicationComponentImpl(AppModule appModuleParam, Context contextParam,
        Activity activityParam, Fragment fragmentParam) {
      this.context = contextParam;
      this.activity = activityParam;
      this.fragment = fragmentParam;
      initialize(appModuleParam, contextParam, activityParam, fragmentParam);

    }

    private MainRemote mainRemote() {
      return new MainRemote(provideNetworkModelProvider.get());
    }

    private CustomBottomNavigationModule customBottomNavigationModule() {
      return new CustomBottomNavigationModule(context, provideSharedPrefModuleProvider.get(), provideNavigationModuleProvider.get(), provideGlideModuleProvider.get());
    }

    private MainViewModel mainViewModel() {
      return new MainViewModel(mainRemote(), provideConnectionStateLiveDataModuleProvider.get(), customBottomNavigationModule());
    }

    private PixModule pixModule() {
      return new PixModule(providePermissionModuleProvider.get(), provideNavigationModuleProvider.get(), activity, fragment, providePikItModuleProvider.get());
    }

    private SplashViewModel splashViewModel() {
      return new SplashViewModel(mainRemote());
    }

    private LoginRemote loginRemote() {
      return new LoginRemote(provideNetworkModelProvider.get(), provideSharedPrefModuleProvider.get());
    }

    private LoginDataModule loginDataModule() {
      return new LoginDataModule(context, provideValidationModuleProvider.get(), provideRXModuleProvider.get(), provideSharedPrefModuleProvider.get(), fragment, provideNavigationModuleProvider.get(), provideOtpBlocUserModuleProvider.get());
    }

    private LoginViewModel loginViewModel() {
      return new LoginViewModel(loginRemote(), loginDataModule());
    }

    private ApiResponseModule<LoginMapper> apiResponseModuleOfLoginMapper() {
      return new ApiResponseModule<LoginMapper>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private RegisterDataModule registerDataModule() {
      return new RegisterDataModule(context, provideValidationModuleProvider.get(), provideRXModuleProvider.get(), provideSharedPrefModuleProvider.get(), fragment);
    }

    private RegisterViewModel registerViewModel() {
      return new RegisterViewModel(registerDataModule());
    }

    private CustomIconMenuAdapter customIconMenuAdapter() {
      return new CustomIconMenuAdapter(provideGlideModuleProvider.get());
    }

    private PowerMenuModule powerMenuModule() {
      return new PowerMenuModule(context, customIconMenuAdapter());
    }

    private CountryDataModule countryDataModule() {
      return new CountryDataModule(context, powerMenuModule(), provideGlideModuleProvider.get());
    }

    private ApiResponseModule<List<CountryMapper>> apiResponseModuleOfListOfCountryMapper() {
      return new ApiResponseModule<List<CountryMapper>>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private ApiResponseModule<String> apiResponseModuleOfString() {
      return new ApiResponseModule<String>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private CheckMobileRemote checkMobileRemote() {
      return new CheckMobileRemote(provideNetworkModelProvider.get());
    }

    private CheckMobileDataModule checkMobileDataModule() {
      return new CheckMobileDataModule(countryDataModule(), context, provideValidationModuleProvider.get(), provideRXModuleProvider.get());
    }

    private CheckMobileViewModel checkMobileViewModel() {
      return new CheckMobileViewModel(checkMobileRemote(), checkMobileDataModule());
    }

    private CountryRemote countryRemote() {
      return new CountryRemote(provideNetworkModelProvider.get());
    }

    private CountryViewModel countryViewModel() {
      return new CountryViewModel(countryRemote());
    }

    private SmsVerifyCatcherModule smsVerifyCatcherModule() {
      return new SmsVerifyCatcherModule(activity, context, fragment);
    }

    private SmsIdentifierModule smsIdentifierModule() {
      return new SmsIdentifierModule(context, providePermissionModuleProvider.get(), smsVerifyCatcherModule());
    }

    private OTPDataModule oTPDataModule() {
      return new OTPDataModule(context, provideRXModuleProvider.get(), provideOtpBlocUserModuleProvider.get(), provideNavigationModuleProvider.get(), smsIdentifierModule(), provideUtilityModuleProvider.get());
    }

    private VerifyMobileOtpRemote verifyMobileOtpRemote() {
      return new VerifyMobileOtpRemote(provideNetworkModelProvider.get());
    }

    private MobileOTPViewModel mobileOTPViewModel() {
      return new MobileOTPViewModel(oTPDataModule(), checkMobileRemote(), verifyMobileOtpRemote());
    }

    private PersonalInfoRemote personalInfoRemote() {
      return new PersonalInfoRemote(provideNetworkModelProvider.get());
    }

    private MemberTypeAdapter memberTypeAdapter() {
      return new MemberTypeAdapter(provideGlideModuleProvider.get(), context);
    }

    private PersonalInfoDataModule personalInfoDataModule() {
      return new PersonalInfoDataModule(context, provideRXModuleProvider.get(), pixModule(), provideValidationModuleProvider.get(), provideCountDownModuleProvider.get(), provideGlideModuleProvider.get(), memberTypeAdapter(), provideDialogModuleProvider.get(), provideDateTimeModuleProvider.get(), provideUtilityModuleProvider.get());
    }

    private GenderRemote genderRemote() {
      return new GenderRemote(provideNetworkModelProvider.get());
    }

    private PersonalInfoViewModel personalInfoViewModel() {
      return new PersonalInfoViewModel(personalInfoRemote(), personalInfoDataModule(), genderRemote());
    }

    private MemberTypeRemote memberTypeRemote() {
      return new MemberTypeRemote(provideNetworkModelProvider.get());
    }

    private MemberTypeViewModel memberTypeViewModel() {
      return new MemberTypeViewModel(memberTypeRemote());
    }

    private ApiResponseModule<List<DropDownMapper>> apiResponseModuleOfListOfDropDownMapper() {
      return new ApiResponseModule<List<DropDownMapper>>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private ApiResponseModule<List<GenderMapper>> apiResponseModuleOfListOfGenderMapper() {
      return new ApiResponseModule<List<GenderMapper>>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private FaceDetectionModule faceDetectionModule() {
      return new FaceDetectionModule(provideDialogModuleProvider.get(), context, pixModule(), provideNavigationModuleProvider.get());
    }

    private CompressModule compressModule() {
      return new CompressModule(context, fragment, provideUtilityModuleProvider.get(), activity);
    }

    private ImagePickerModule imagePickerModule() {
      return new ImagePickerModule(fragment);
    }

    private CameraXModule cameraXModule() {
      return new CameraXModule(context, provideCustomAlertModuleProvider.get(), activity, providePikItModuleProvider.get());
    }

    private StudentVerifyDataModule studentVerifyDataModule() {
      return new StudentVerifyDataModule(context, provideNavigationModuleProvider.get(), provideDialogModuleProvider.get(), provideDateTimeModuleProvider.get());
    }

    private StudentVerifyViewModel studentVerifyViewModel() {
      return new StudentVerifyViewModel(studentVerifyDataModule());
    }

    private PasswordDataModule passwordDataModule() {
      return new PasswordDataModule(context, provideRXModuleProvider.get(), provideValidationModuleProvider.get());
    }

    private RegisterRemote registerRemote() {
      return new RegisterRemote(provideNetworkModelProvider.get(), provideUtilityModuleProvider.get());
    }

    private RegisterPasswordViewModel registerPasswordViewModel() {
      return new RegisterPasswordViewModel(passwordDataModule(), registerRemote());
    }

    private SendOtpEmailRemote sendOtpEmailRemote() {
      return new SendOtpEmailRemote(provideNetworkModelProvider.get());
    }

    private CheckOtpEmailRemote checkOtpEmailRemote() {
      return new CheckOtpEmailRemote(provideNetworkModelProvider.get());
    }

    private CheckEmailViewModel checkEmailViewModel() {
      return new CheckEmailViewModel(oTPDataModule(), sendOtpEmailRemote(), checkOtpEmailRemote());
    }

    private SendOtpForgotPasswordMobile sendOtpForgotPasswordMobile() {
      return new SendOtpForgotPasswordMobile(provideNetworkModelProvider.get());
    }

    private ForgetPasswordMobileViewModel forgetPasswordMobileViewModel() {
      return new ForgetPasswordMobileViewModel(checkMobileDataModule(), sendOtpForgotPasswordMobile());
    }

    private WorkSpaceRemote workSpaceRemote() {
      return new WorkSpaceRemote(provideNetworkModelProvider.get(), provideDateTimeModuleProvider.get());
    }

    private MeetingRoomRemote meetingRoomRemote() {
      return new MeetingRoomRemote(provideNetworkModelProvider.get(), context, provideDateTimeModuleProvider.get());
    }

    private EventSpaceRemote eventSpaceRemote() {
      return new EventSpaceRemote(provideNetworkModelProvider.get(), context, provideDateTimeModuleProvider.get());
    }

    private HomeViewModel homeViewModel() {
      return new HomeViewModel(workSpaceRemote(), meetingRoomRemote(), eventSpaceRemote());
    }

    private HomeViewPagerAdapter homeViewPagerAdapter() {
      return new HomeViewPagerAdapter(context, fragment);
    }

    private LocationModule locationModule() {
      return new LocationModule(context, activity);
    }

    private AmenityAdapter amenityAdapter() {
      return new AmenityAdapter(provideGlideModuleProvider.get());
    }

    private PriceViewPagerAdapter priceViewPagerAdapter() {
      return new PriceViewPagerAdapter(activity);
    }

    private WorkSpaceAdapter workSpaceAdapter() {
      return new WorkSpaceAdapter(provideGlideModuleProvider.get(), context, amenityAdapter(), provideCountDownModuleProvider.get(), provideSpannableStringModuleProvider.get(), priceViewPagerAdapter());
    }

    private ApiResponseModule<List<WorkSpaceMapper>> apiResponseModuleOfListOfWorkSpaceMapper() {
      return new ApiResponseModule<List<WorkSpaceMapper>>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private MeetingRoomAdapter meetingRoomAdapter() {
      return new MeetingRoomAdapter(provideGlideModuleProvider.get(), priceViewPagerAdapter(), context);
    }

    private ApiResponseModule<List<MeetingRoomMapper>> apiResponseModuleOfListOfMeetingRoomMapper(
        ) {
      return new ApiResponseModule<List<MeetingRoomMapper>>(provideDialogModuleProvider.get(), context, provideCustomAlertModuleProvider.get(), activity);
    }

    private VerifyMobileOtpForgotPasswordRemote verifyMobileOtpForgotPasswordRemote() {
      return new VerifyMobileOtpForgotPasswordRemote(provideNetworkModelProvider.get());
    }

    private ResetPasswordOtpViewModel resetPasswordOtpViewModel() {
      return new ResetPasswordOtpViewModel(oTPDataModule(), checkMobileRemote(), verifyMobileOtpForgotPasswordRemote());
    }

    private ResetPasswordRemote resetPasswordRemote() {
      return new ResetPasswordRemote(provideNetworkModelProvider.get());
    }

    private ResetPasswordViewModel resetPasswordViewModel() {
      return new ResetPasswordViewModel(passwordDataModule(), resetPasswordRemote());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam, final Context contextParam,
        final Activity activityParam, final Fragment fragmentParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideAppDefaultModuleProvider = DoubleCheck.provider(AppModule_ProvideAppDefaultModuleFactory.create(appModuleParam, contextProvider));
      this.provideSharedPrefModuleProvider = DoubleCheck.provider(AppModule_ProvideSharedPrefModuleFactory.create(appModuleParam, contextProvider));
      this.provideOkHttpClientProvider = DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(appModuleParam, provideSharedPrefModuleProvider, contextProvider));
      this.provideNetworkModelProvider = DoubleCheck.provider(AppModule_ProvideNetworkModelFactory.create(appModuleParam, contextProvider, provideOkHttpClientProvider, provideSharedPrefModuleProvider));
      this.provideConnectionStateLiveDataModuleProvider = DoubleCheck.provider(AppModule_ProvideConnectionStateLiveDataModuleFactory.create(appModuleParam, contextProvider, provideNetworkModelProvider));
      this.fragmentProvider = InstanceFactory.createNullable(fragmentParam);
      this.activityProvider = InstanceFactory.create(activityParam);
      this.provideNavigationModuleProvider = DoubleCheck.provider(AppModule_ProvideNavigationModuleFactory.create(appModuleParam, fragmentProvider, activityProvider));
      this.provideGlideModuleProvider = DoubleCheck.provider(AppModule_ProvideGlideModuleFactory.create(appModuleParam, contextProvider));
      this.provideDialogModuleProvider = DoubleCheck.provider(AppModule_ProvideDialogModuleFactory.create(appModuleParam, contextProvider, activityProvider, provideNavigationModuleProvider));
      this.provideCustomAlertModuleProvider = DoubleCheck.provider(AppModule_ProvideCustomAlertModuleFactory.create(appModuleParam, contextProvider, provideDialogModuleProvider));
      this.providePermissionModuleProvider = DoubleCheck.provider(AppModule_ProvidePermissionModuleFactory.create(appModuleParam, contextProvider, activityProvider, fragmentProvider, provideCustomAlertModuleProvider, provideDialogModuleProvider, provideSharedPrefModuleProvider));
      this.providePikItModuleProvider = DoubleCheck.provider(AppModule_ProvidePikItModuleFactory.create(appModuleParam, contextProvider, activityProvider, fragmentProvider));
      this.provideUtilityModuleProvider = DoubleCheck.provider(AppModule_ProvideUtilityModuleFactory.create(appModuleParam, contextProvider, activityProvider));
      this.provideDateTimeModuleProvider = DoubleCheck.provider(AppModule_ProvideDateTimeModuleFactory.create(appModuleParam));
      this.provideCountDownModuleProvider = DoubleCheck.provider(AppModule_ProvideCountDownModuleFactory.create(appModuleParam, contextProvider));
      this.provideOtpBlocUserModuleProvider = DoubleCheck.provider(AppModule_ProvideOtpBlocUserModuleFactory.create(appModuleParam, contextProvider, provideDialogModuleProvider, provideSharedPrefModuleProvider, provideDateTimeModuleProvider, provideCountDownModuleProvider));
      this.provideValidationModuleProvider = DoubleCheck.provider(AppModule_ProvideValidationModuleFactory.create(appModuleParam));
      this.provideRXModuleProvider = DoubleCheck.provider(AppModule_ProvideRXModuleFactory.create(appModuleParam));
      this.provideSpannableStringModuleProvider = DoubleCheck.provider(AppModule_ProvideSpannableStringModuleFactory.create(appModuleParam, contextProvider));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);
    }

    @Override
    public void inject(StartFragment startFragment) {
      injectStartFragment(startFragment);
    }

    @Override
    public void inject(SplashFragment splashFragment) {
      injectSplashFragment(splashFragment);
    }

    @Override
    public void inject(LoginFragment loginFragment) {
      injectLoginFragment(loginFragment);
    }

    @Override
    public void inject(TwoChooseDialogFragment twoChooseDialogFragment) {
      injectTwoChooseDialogFragment(twoChooseDialogFragment);
    }

    @Override
    public void inject(NoInternetFragment noInternetFragment) {
      injectNoInternetFragment(noInternetFragment);
    }

    @Override
    public void inject(RegisterFragment registerFragment) {
      injectRegisterFragment(registerFragment);
    }

    @Override
    public void inject(CheckMobileFragment checkMobileFragment) {
      injectCheckMobileFragment(checkMobileFragment);
    }

    @Override
    public void inject(MobileOTPFragment mobileOTPFragment) {
      injectMobileOTPFragment(mobileOTPFragment);
    }

    @Override
    public void inject(PersonalInfoFragment personalInfoFragment) {
      injectPersonalInfoFragment(personalInfoFragment);
    }

    @Override
    public void inject(DatePickerFragment datePickerFragment) {
      injectDatePickerFragment(datePickerFragment);
    }

    @Override
    public void inject(SingleButtonDialogFragment singleButtonDialogFragment) {
      injectSingleButtonDialogFragment(singleButtonDialogFragment);
    }

    @Override
    public void inject(ScanningFragment scanningFragment) {
      injectScanningFragment(scanningFragment);
    }

    @Override
    public void inject(CustomCameraXFragment customCameraXFragment) {
      injectCustomCameraXFragment(customCameraXFragment);
    }

    @Override
    public void inject(StudentVerifyFragment studentVerifyFragment) {
      injectStudentVerifyFragment(studentVerifyFragment);
    }

    @Override
    public void inject(SuccessRegisterFragment successRegisterFragment) {
      injectSuccessRegisterFragment(successRegisterFragment);
    }

    @Override
    public void inject(RegisterPasswordFragment registerPasswordFragment) {
      injectRegisterPasswordFragment(registerPasswordFragment);
    }

    @Override
    public void inject(CheckEmailFragment checkEmailFragment) {
      injectCheckEmailFragment(checkEmailFragment);
    }

    @Override
    public void inject(ForgetPasswordMobileFragment forgetPasswordMobileFragment) {
      injectForgetPasswordMobileFragment(forgetPasswordMobileFragment);
    }

    @Override
    public void inject(HomeFragment homeFragment) {
      injectHomeFragment(homeFragment);
    }

    @Override
    public void inject(WorkSpaceFragment workSpaceFragment) {
      injectWorkSpaceFragment(workSpaceFragment);
    }

    @Override
    public void inject(MeetingRoomFragment meetingRoomFragment) {
      injectMeetingRoomFragment(meetingRoomFragment);
    }

    @Override
    public void inject(EventSpaceFragment eventSpaceFragment) {
      injectEventSpaceFragment(eventSpaceFragment);
    }

    @Override
    public void inject(ResetPasswordOtpFragment resetPasswordOtpFragment) {
      injectResetPasswordOtpFragment(resetPasswordOtpFragment);
    }

    @Override
    public void inject(ResetPasswordFragment resetPasswordFragment) {
      injectResetPasswordFragment(resetPasswordFragment);
    }

    @Override
    public void inject(PasswordSavedFragment passwordSavedFragment) {
      injectPasswordSavedFragment(passwordSavedFragment);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectAppDefaultModel(instance, provideAppDefaultModuleProvider.get());
      MainActivity_MembersInjector.injectMainViewModel(instance, mainViewModel());
      MainActivity_MembersInjector.injectDialogModule(instance, provideDialogModuleProvider.get());
      MainActivity_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      MainActivity_MembersInjector.injectPixModule(instance, pixModule());
      MainActivity_MembersInjector.injectPermissionModule(instance, providePermissionModuleProvider.get());
      MainActivity_MembersInjector.injectGlideModule(instance, provideGlideModuleProvider.get());
      MainActivity_MembersInjector.injectSharedPrefModule(instance, provideSharedPrefModuleProvider.get());
      MainActivity_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private StartFragment injectStartFragment(StartFragment instance) {
      StartFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      StartFragment_MembersInjector.injectAppUtilityModule(instance, provideUtilityModuleProvider.get());
      StartFragment_MembersInjector.injectBlockUserModule(instance, provideOtpBlocUserModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SplashFragment injectSplashFragment(SplashFragment instance) {
      SplashFragment_MembersInjector.injectSplashViewModel(instance, splashViewModel());
      SplashFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LoginFragment injectLoginFragment(LoginFragment instance) {
      LoginFragment_MembersInjector.injectLoginViewModel(instance, loginViewModel());
      LoginFragment_MembersInjector.injectApiResponseModule(instance, apiResponseModuleOfLoginMapper());
      LoginFragment_MembersInjector.injectSharedPrefModule(instance, provideSharedPrefModuleProvider.get());
      LoginFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      LoginFragment_MembersInjector.injectValidationModule(instance, provideValidationModuleProvider.get());
      LoginFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private TwoChooseDialogFragment injectTwoChooseDialogFragment(
        TwoChooseDialogFragment instance) {
      TwoChooseDialogFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private NoInternetFragment injectNoInternetFragment(NoInternetFragment instance) {
      NoInternetFragment_MembersInjector.injectNetworkModule(instance, provideNetworkModelProvider.get());
      NoInternetFragment_MembersInjector.injectConnectionLiveDataModule(instance, provideConnectionStateLiveDataModuleProvider.get());
      NoInternetFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      NoInternetFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
      RegisterFragment_MembersInjector.injectNavigationModel(instance, provideNavigationModuleProvider.get());
      RegisterFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      RegisterFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      return instance;
    }

    @CanIgnoreReturnValue
    private CheckMobileFragment injectCheckMobileFragment(CheckMobileFragment instance) {
      CheckMobileFragment_MembersInjector.injectCountryDataModule(instance, countryDataModule());
      CheckMobileFragment_MembersInjector.injectCountryResponseHandler(instance, apiResponseModuleOfListOfCountryMapper());
      CheckMobileFragment_MembersInjector.injectVerifyMobileHandler(instance, apiResponseModuleOfString());
      CheckMobileFragment_MembersInjector.injectCheckMobileViewModel(instance, checkMobileViewModel());
      CheckMobileFragment_MembersInjector.injectCountryViewModel(instance, countryViewModel());
      CheckMobileFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      CheckMobileFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      return instance;
    }

    @CanIgnoreReturnValue
    private MobileOTPFragment injectMobileOTPFragment(MobileOTPFragment instance) {
      MobileOTPFragment_MembersInjector.injectViewModel(instance, mobileOTPViewModel());
      MobileOTPFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      MobileOTPFragment_MembersInjector.injectResendCodeHandler(instance, apiResponseModuleOfString());
      MobileOTPFragment_MembersInjector.injectVerifyMobileHandler(instance, apiResponseModuleOfString());
      MobileOTPFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      return instance;
    }

    @CanIgnoreReturnValue
    private PersonalInfoFragment injectPersonalInfoFragment(PersonalInfoFragment instance) {
      PersonalInfoFragment_MembersInjector.injectViewModel(instance, personalInfoViewModel());
      PersonalInfoFragment_MembersInjector.injectMemberTypeViewModel(instance, memberTypeViewModel());
      PersonalInfoFragment_MembersInjector.injectMemberTypeResponseHandler(instance, apiResponseModuleOfListOfDropDownMapper());
      PersonalInfoFragment_MembersInjector.injectGenderResponseHandler(instance, apiResponseModuleOfListOfGenderMapper());
      PersonalInfoFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      PersonalInfoFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      PersonalInfoFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private DatePickerFragment injectDatePickerFragment(DatePickerFragment instance) {
      DatePickerFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      DatePickerFragment_MembersInjector.injectDateTimeModule(instance, provideDateTimeModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SingleButtonDialogFragment injectSingleButtonDialogFragment(
        SingleButtonDialogFragment instance) {
      SingleButtonDialogFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ScanningFragment injectScanningFragment(ScanningFragment instance) {
      ScanningFragment_MembersInjector.injectFaceDetectionModule(instance, faceDetectionModule());
      ScanningFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      ScanningFragment_MembersInjector.injectCompressModule(instance, compressModule());
      ScanningFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private CustomCameraXFragment injectCustomCameraXFragment(CustomCameraXFragment instance) {
      CustomCameraXFragment_MembersInjector.injectPermissionModule(instance, providePermissionModuleProvider.get());
      CustomCameraXFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      CustomCameraXFragment_MembersInjector.injectImagePickerModule(instance, imagePickerModule());
      CustomCameraXFragment_MembersInjector.injectPikItModule(instance, providePikItModuleProvider.get());
      CustomCameraXFragment_MembersInjector.injectCameraXModule(instance, cameraXModule());
      return instance;
    }

    @CanIgnoreReturnValue
    private StudentVerifyFragment injectStudentVerifyFragment(StudentVerifyFragment instance) {
      StudentVerifyFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      StudentVerifyFragment_MembersInjector.injectViewModel(instance, studentVerifyViewModel());
      StudentVerifyFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      StudentVerifyFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SuccessRegisterFragment injectSuccessRegisterFragment(
        SuccessRegisterFragment instance) {
      SuccessRegisterFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RegisterPasswordFragment injectRegisterPasswordFragment(
        RegisterPasswordFragment instance) {
      RegisterPasswordFragment_MembersInjector.injectViewModel(instance, registerPasswordViewModel());
      RegisterPasswordFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      RegisterPasswordFragment_MembersInjector.injectHandleRegisterApi(instance, apiResponseModuleOfString());
      RegisterPasswordFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private CheckEmailFragment injectCheckEmailFragment(CheckEmailFragment instance) {
      CheckEmailFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      CheckEmailFragment_MembersInjector.injectRegisterViewModel(instance, registerViewModel());
      CheckEmailFragment_MembersInjector.injectViewModel(instance, checkEmailViewModel());
      CheckEmailFragment_MembersInjector.injectSendEmailOtpApiHandler(instance, apiResponseModuleOfString());
      CheckEmailFragment_MembersInjector.injectVerifyOtpApiHandler(instance, apiResponseModuleOfString());
      CheckEmailFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ForgetPasswordMobileFragment injectForgetPasswordMobileFragment(
        ForgetPasswordMobileFragment instance) {
      ForgetPasswordMobileFragment_MembersInjector.injectCountryResponseHandler(instance, apiResponseModuleOfListOfCountryMapper());
      ForgetPasswordMobileFragment_MembersInjector.injectCheckMobileHandler(instance, apiResponseModuleOfString());
      ForgetPasswordMobileFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      ForgetPasswordMobileFragment_MembersInjector.injectViewModel(instance, forgetPasswordMobileViewModel());
      ForgetPasswordMobileFragment_MembersInjector.injectCountryViewModel(instance, countryViewModel());
      return instance;
    }

    @CanIgnoreReturnValue
    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectPermissionModule(instance, providePermissionModuleProvider.get());
      HomeFragment_MembersInjector.injectViewModel(instance, homeViewModel());
      HomeFragment_MembersInjector.injectHomeViewPagerAdapter(instance, homeViewPagerAdapter());
      HomeFragment_MembersInjector.injectLocationModule(instance, locationModule());
      return instance;
    }

    @CanIgnoreReturnValue
    private WorkSpaceFragment injectWorkSpaceFragment(WorkSpaceFragment instance) {
      WorkSpaceFragment_MembersInjector.injectViewModel(instance, homeViewModel());
      WorkSpaceFragment_MembersInjector.injectWorkSpaceAdapter(instance, workSpaceAdapter());
      WorkSpaceFragment_MembersInjector.injectWorkSpaceApiHandler(instance, apiResponseModuleOfListOfWorkSpaceMapper());
      return instance;
    }

    @CanIgnoreReturnValue
    private MeetingRoomFragment injectMeetingRoomFragment(MeetingRoomFragment instance) {
      MeetingRoomFragment_MembersInjector.injectViewModel(instance, homeViewModel());
      MeetingRoomFragment_MembersInjector.injectMeetingRoomAdapter(instance, meetingRoomAdapter());
      MeetingRoomFragment_MembersInjector.injectWorkSpaceApiHandler(instance, apiResponseModuleOfListOfMeetingRoomMapper());
      return instance;
    }

    @CanIgnoreReturnValue
    private EventSpaceFragment injectEventSpaceFragment(EventSpaceFragment instance) {
      EventSpaceFragment_MembersInjector.injectViewModel(instance, homeViewModel());
      EventSpaceFragment_MembersInjector.injectEventSpaceAdapter(instance, meetingRoomAdapter());
      EventSpaceFragment_MembersInjector.injectEventSpaceApiHandler(instance, apiResponseModuleOfListOfMeetingRoomMapper());
      return instance;
    }

    @CanIgnoreReturnValue
    private ResetPasswordOtpFragment injectResetPasswordOtpFragment(
        ResetPasswordOtpFragment instance) {
      ResetPasswordOtpFragment_MembersInjector.injectViewModel(instance, resetPasswordOtpViewModel());
      ResetPasswordOtpFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      ResetPasswordOtpFragment_MembersInjector.injectResendCodeHandler(instance, apiResponseModuleOfString());
      ResetPasswordOtpFragment_MembersInjector.injectVerifyMobileHandler(instance, apiResponseModuleOfString());
      return instance;
    }

    @CanIgnoreReturnValue
    private ResetPasswordFragment injectResetPasswordFragment(ResetPasswordFragment instance) {
      ResetPasswordFragment_MembersInjector.injectViewModel(instance, resetPasswordViewModel());
      ResetPasswordFragment_MembersInjector.injectHandleRegisterApi(instance, apiResponseModuleOfString());
      ResetPasswordFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      ResetPasswordFragment_MembersInjector.injectUtilityModule(instance, provideUtilityModuleProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PasswordSavedFragment injectPasswordSavedFragment(PasswordSavedFragment instance) {
      PasswordSavedFragment_MembersInjector.injectNavigationModule(instance, provideNavigationModuleProvider.get());
      return instance;
    }
  }
}
