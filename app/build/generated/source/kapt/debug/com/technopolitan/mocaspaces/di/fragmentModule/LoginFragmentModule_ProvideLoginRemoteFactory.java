// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import com.technopolitan.mocaspaces.data.remote.LoginRemote;
import com.technopolitan.mocaspaces.modules.SharedPrefModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginFragmentModule_ProvideLoginRemoteFactory implements Factory<LoginRemote> {
  private final LoginFragmentModule module;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  public LoginFragmentModule_ProvideLoginRemoteFactory(LoginFragmentModule module,
      Provider<SharedPrefModule> sharedPrefModuleProvider) {
    this.module = module;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
  }

  @Override
  public LoginRemote get() {
    return provideLoginRemote(module, sharedPrefModuleProvider.get());
  }

  public static LoginFragmentModule_ProvideLoginRemoteFactory create(LoginFragmentModule module,
      Provider<SharedPrefModule> sharedPrefModuleProvider) {
    return new LoginFragmentModule_ProvideLoginRemoteFactory(module, sharedPrefModuleProvider);
  }

  public static LoginRemote provideLoginRemote(LoginFragmentModule instance,
      SharedPrefModule sharedPrefModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginRemote(sharedPrefModule));
  }
}
