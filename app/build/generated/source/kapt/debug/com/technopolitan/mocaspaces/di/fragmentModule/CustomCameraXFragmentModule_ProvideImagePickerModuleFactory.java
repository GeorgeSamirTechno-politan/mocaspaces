// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import androidx.fragment.app.Fragment;
import com.technopolitan.mocaspaces.modules.ImagePickerModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CustomCameraXFragmentModule_ProvideImagePickerModuleFactory implements Factory<ImagePickerModule> {
  private final CustomCameraXFragmentModule module;

  private final Provider<Fragment> fragmentProvider;

  public CustomCameraXFragmentModule_ProvideImagePickerModuleFactory(
      CustomCameraXFragmentModule module, Provider<Fragment> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public ImagePickerModule get() {
    return provideImagePickerModule(module, fragmentProvider.get());
  }

  public static CustomCameraXFragmentModule_ProvideImagePickerModuleFactory create(
      CustomCameraXFragmentModule module, Provider<Fragment> fragmentProvider) {
    return new CustomCameraXFragmentModule_ProvideImagePickerModuleFactory(module, fragmentProvider);
  }

  public static ImagePickerModule provideImagePickerModule(CustomCameraXFragmentModule instance,
      Fragment fragment) {
    return Preconditions.checkNotNullFromProvides(instance.provideImagePickerModule(fragment));
  }
}
