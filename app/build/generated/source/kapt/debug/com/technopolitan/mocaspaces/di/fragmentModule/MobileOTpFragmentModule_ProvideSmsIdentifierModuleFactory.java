// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.content.Context;
import com.technopolitan.mocaspaces.modules.PermissionModule;
import com.technopolitan.mocaspaces.modules.SmsIdentifierModule;
import com.technopolitan.mocaspaces.modules.SmsVerifyCatcherModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MobileOTpFragmentModule_ProvideSmsIdentifierModuleFactory implements Factory<SmsIdentifierModule> {
  private final MobileOTpFragmentModule module;

  private final Provider<Context> contextProvider;

  private final Provider<PermissionModule> permissionModuleProvider;

  private final Provider<SmsVerifyCatcherModule> smsVerifyCatcherModuleProvider;

  public MobileOTpFragmentModule_ProvideSmsIdentifierModuleFactory(MobileOTpFragmentModule module,
      Provider<Context> contextProvider, Provider<PermissionModule> permissionModuleProvider,
      Provider<SmsVerifyCatcherModule> smsVerifyCatcherModuleProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.permissionModuleProvider = permissionModuleProvider;
    this.smsVerifyCatcherModuleProvider = smsVerifyCatcherModuleProvider;
  }

  @Override
  public SmsIdentifierModule get() {
    return provideSmsIdentifierModule(module, contextProvider.get(), permissionModuleProvider.get(), smsVerifyCatcherModuleProvider.get());
  }

  public static MobileOTpFragmentModule_ProvideSmsIdentifierModuleFactory create(
      MobileOTpFragmentModule module, Provider<Context> contextProvider,
      Provider<PermissionModule> permissionModuleProvider,
      Provider<SmsVerifyCatcherModule> smsVerifyCatcherModuleProvider) {
    return new MobileOTpFragmentModule_ProvideSmsIdentifierModuleFactory(module, contextProvider, permissionModuleProvider, smsVerifyCatcherModuleProvider);
  }

  public static SmsIdentifierModule provideSmsIdentifierModule(MobileOTpFragmentModule instance,
      Context context, PermissionModule permissionModule,
      SmsVerifyCatcherModule smsVerifyCatcherModule) {
    return Preconditions.checkNotNullFromProvides(instance.provideSmsIdentifierModule(context, permissionModule, smsVerifyCatcherModule));
  }
}
