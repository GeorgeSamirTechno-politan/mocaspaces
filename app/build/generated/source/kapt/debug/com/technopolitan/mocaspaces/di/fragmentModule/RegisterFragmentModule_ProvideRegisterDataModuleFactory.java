// Generated by Dagger (https://dagger.dev).
package com.technopolitan.mocaspaces.di.fragmentModule;

import android.content.Context;
import androidx.fragment.app.Fragment;
import com.technopolitan.mocaspaces.data.register.RegisterDataModule;
import com.technopolitan.mocaspaces.modules.RXModule;
import com.technopolitan.mocaspaces.modules.SharedPrefModule;
import com.technopolitan.mocaspaces.modules.ValidationModule;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterFragmentModule_ProvideRegisterDataModuleFactory implements Factory<RegisterDataModule> {
  private final RegisterFragmentModule module;

  private final Provider<Context> contextProvider;

  private final Provider<ValidationModule> validationModuleProvider;

  private final Provider<RXModule> rxModuleProvider;

  private final Provider<SharedPrefModule> sharedPrefModuleProvider;

  private final Provider<Fragment> fragmentProvider;

  public RegisterFragmentModule_ProvideRegisterDataModuleFactory(RegisterFragmentModule module,
      Provider<Context> contextProvider, Provider<ValidationModule> validationModuleProvider,
      Provider<RXModule> rxModuleProvider, Provider<SharedPrefModule> sharedPrefModuleProvider,
      Provider<Fragment> fragmentProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.validationModuleProvider = validationModuleProvider;
    this.rxModuleProvider = rxModuleProvider;
    this.sharedPrefModuleProvider = sharedPrefModuleProvider;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public RegisterDataModule get() {
    return provideRegisterDataModule(module, contextProvider.get(), validationModuleProvider.get(), rxModuleProvider.get(), sharedPrefModuleProvider.get(), fragmentProvider.get());
  }

  public static RegisterFragmentModule_ProvideRegisterDataModuleFactory create(
      RegisterFragmentModule module, Provider<Context> contextProvider,
      Provider<ValidationModule> validationModuleProvider, Provider<RXModule> rxModuleProvider,
      Provider<SharedPrefModule> sharedPrefModuleProvider, Provider<Fragment> fragmentProvider) {
    return new RegisterFragmentModule_ProvideRegisterDataModuleFactory(module, contextProvider, validationModuleProvider, rxModuleProvider, sharedPrefModuleProvider, fragmentProvider);
  }

  public static RegisterDataModule provideRegisterDataModule(RegisterFragmentModule instance,
      Context context, ValidationModule validationModule, RXModule rxModule,
      SharedPrefModule sharedPrefModule, Fragment fragment) {
    return Preconditions.checkNotNullFromProvides(instance.provideRegisterDataModule(context, validationModule, rxModule, sharedPrefModule, fragment));
  }
}
